/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * BioTisX API Documentation
 * The BioTisX API description
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './axios';
export type OrganizationsControllerGetOrganizationsParams = {
  searchText?: string;
  limit?: number;
  page?: number;
  search?: string;
};

export type RolesControllerGetRolesParams = {
  searchText?: string;
  limit?: number;
  page?: number;
  search?: string;
};

export type NotificationControllerGetNotifications200Item = { [key: string]: any };

export type UsersControllerFindAllParams = {
  searchText?: string;
  limit?: number;
  page?: number;
  search?: string;
};

export interface OrganizationDto {
  address: string;
  code: string;
  contractEndDate: string;
  contractStartDate: string;
  country: string;
  id: string;
  licenseKey: string;
  logoUrl: string;
  name: string;
  orgBusiness: string;
  orgSize: number;
  zipCode: string;
}

export interface OrganizationsDto {
  organizations: OrganizationDto[];
  total: number;
}

export type CreateGlobalSettingDtoValue = string | number | boolean;

export interface CreateGlobalSettingDto {
  editable: boolean;
  GSTitle: string;
  GSType: string;
  lastModifyBy: string;
  value: CreateGlobalSettingDtoValue;
}

export interface UpdateGlobalSettingDto {
  body: CreateGlobalSettingDto;
  id: string;
}

export type GlobalSettingDtoValue = string | number | boolean;

export interface GlobalSettingDto {
  editable: boolean;
  GSTitle: string;
  GSType: string;
  id: string;
  value: GlobalSettingDtoValue;
}

export interface UpdateLovBody {
  isActive: boolean;
  lovAbbrev: string;
  lovCd: string;
  sortOrder: number;
}

export interface UpdateLovDto {
  body: UpdateLovBody;
  lovId: string;
}

export interface CreateLovDto {
  isActive: boolean;
  lovAbbrev: string;
  lovCd: string;
  lovType: string;
  lovTypeDesc: string;
  sortOrder: number;
}

export interface LovDto {
  id: string;
  isActive: boolean;
  lovAbbrev: string;
  lovCd: string;
  lovType: string;
  lovTypeDesc: string;
  sortOrder: number;
}

export interface GetRolePermissionsResponse {
  [key: string]: any;
}

export interface CreateRoleDto {
  name: string;
}

export interface RoleDto {
  id: string;
  name: string;
}

export interface RolesDto {
  roles: RoleDto[];
  total: number;
}

export interface RefreshTokenDto {
  email: string;
  refreshToken: string;
}

export interface Token {
  accessToken: string;
  refreshToken: string;
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface CreateUserDto {
  email: string;
  organizationId: string;
  password: string;
  roleId: string;
}

export interface CreateChangingCultureMediumDto {
  bagBox?: string;
  bagCode: string;
  boxId: string;
  cellCultureCode: string;
  changingCultureDate: string;
  changingCultureMediumCode: string;
  changingCultureMediumTime: number;
  childBags: number;
  customerWeek?: string;
  employeeId: string;
  environmentalCode: string;
  environmentalVolume: number;
  environmentRoomCode: string;
  environmentShelveCode: string;
  note: string;
  transactionType: string;
}

export interface UpdateChangingCultureMediumDto {
  changingCultureMedium: CreateChangingCultureMediumDto;
  id: string;
}

export interface ChangingCultureMediumDto {
  bagBox?: string;
  bagCode: string;
  boxId: string;
  cellCultureCode: string;
  changingCultureDate: string;
  changingCultureMediumCode: string;
  changingCultureMediumTime: number;
  childBags: number;
  createdAt: string;
  customerWeek?: string;
  employeeId: string;
  environmentalCode: string;
  environmentalVolume: number;
  environmentRoomCode: string;
  environmentShelveCode: string;
  id: string;
  note: string;
  transactionType: string;
  updatedAt: string;
}

export interface CreateCellCultureMediumDto {
  batchOfPotCode: string;
  employeeId: string;
  environmentalCode: string;
  environmentalLabel: string;
  environmentalTime: number;
  environmentalVolume: number;
  environmentCode: string;
  environmentUnit: string;
  mixingMediumDate: string;
  note: string;
  potCode: string;
  stirrerCode: string;
  stirringBatchCode: string;
}

export interface UpdateCellCultureMediumDto {
  cellCultureMedium: CreateCellCultureMediumDto;
  id: string;
}

export interface CellCultureMediumDto {
  batchOfPotCode: string;
  createdAt: string;
  employeeId: string;
  environmentalCode: string;
  environmentalLabel: string;
  environmentalTime: number;
  environmentalVolume: number;
  environmentCode: string;
  environmentUnit: string;
  id: string;
  mixingMediumDate: string;
  note: string;
  potCode: string;
  stirrerCode: string;
  stirringBatchCode: string;
  updatedAt: string;
}

export interface CreateProductionStepDto {
  infectionRate: number;
  phaseCode: string;
  phaseName?: string;
  phaseRate: number;
  planId: string;
  planningBags: number;
  planningCluster: number;
  planningEnvironmentId: string;
  planningRate: number;
  planningWeek: number;
  planningYear: number;
}

export interface UpdateProductionStepDto {
  id: string;
  productionStep: CreateProductionStepDto;
}

export interface ProductionStepDto {
  id: string;
  infectionRate: number;
  phaseCode: string;
  phaseName?: string;
  phaseRate: number;
  planId: string;
  planningBags: number;
  planningCluster: number;
  planningEnvironmentId: string;
  planningRate: number;
  planningWeek: number;
  planningYear: number;
}

export type CreateOrderDtoCustomerContactInfo = { [key: string]: any };

export interface CreateOrderDto {
  actualBagsDelivered: number;
  actualDeliveryDate: string;
  actualTreesDelivered: number;
  batch: string;
  batchCode: string;
  cellCultureId: string;
  confirmationStatus: string;
  creatorId: string;
  customerContactInfo?: CreateOrderDtoCustomerContactInfo;
  customerInfo?: string;
  customerTissueLineCode: string;
  dateUploadedFile?: string;
  labNote?: string;
  labQuantityDelivered: number;
  labWeekDelivered: number;
  locationDelivered: string;
  orderFileUrl?: string;
  orderProducingStatus: string;
  orderType: string;
  quantityDelivered: number;
  tissueLineCode: string;
  weekDelivered: number;
  yearDelivered: number;
}

export interface UpdateOrderDto {
  id: string;
  order: CreateOrderDto;
}

export type OrderDtoCustomerContactInfo = { [key: string]: any };

export interface OrderDto {
  actualBagsDelivered: number;
  actualDeliveryDate: string;
  actualTreesDelivered: number;
  batch: string;
  batchCode: string;
  cellCultureId: string;
  confirmationStatus: string;
  createdAt: string;
  creatorId: string;
  customerContactInfo?: OrderDtoCustomerContactInfo;
  customerInfo?: string;
  customerTissueLineCode: string;
  dateUploadedFile?: string;
  id: string;
  labNote?: string;
  labQuantityDelivered: number;
  labWeekDelivered: number;
  locationDelivered: string;
  orderFileUrl?: string;
  orderProducingStatus: string;
  orderType: string;
  quantityDelivered: number;
  tissueLineCode: string;
  updatedAt: string;
  weekDelivered: number;
  yearDelivered: number;
}

export interface CreateSubCulturingDto {
  barCode: string;
  batchCode: string;
  cellCultureCode: string;
  childBatchCode: string;
  cleanCount: number;
  cleanEnvironment: string;
  clonalCluster: number;
  culturemildInfection: number;
  culturePotentialInfection: number;
  cultureSevereInfection: number;
  customerWeeks: number;
  cutOfDate: string;
  disposalBags: number;
  employeeId: string;
  environmentId: string;
  mildInfectionCount: number;
  mildInfectionEnvironment: string;
  motherStock: string;
  notes?: string;
  phaseIndex: number;
  plantCloning: string;
  potentialInfectionCount: number;
  potentialInfectionEnvironment: string;
  severeInfectionCount: number;
  severeInfectionEnvironment: string;
  sterileCulture: number;
  subculturingDate: string;
  surplusBags: number;
  tissueCultureBags: number;
  tissueCultureLineCode: string;
}

export interface UpdateSubCulturingDto {
  id: string;
  subculturing: CreateSubCulturingDto;
}

export interface SubculturingDto {
  barCode: string;
  batchCode: string;
  cellCultureCode: string;
  childBatchCode: string;
  cleanCount: number;
  cleanEnvironment: string;
  clonalCluster: number;
  createdAt: string;
  culturemildInfection: number;
  culturePotentialInfection: number;
  cultureSevereInfection: number;
  customerWeeks: number;
  cutOfDate: string;
  disposalBags: number;
  employeeId: string;
  environmentId: string;
  id: string;
  mildInfectionCount: number;
  mildInfectionEnvironment: string;
  motherStock: string;
  notes?: string;
  phaseIndex: string;
  plantCloning: string;
  potentialInfectionCount: number;
  potentialInfectionEnvironment: string;
  severeInfectionCount: number;
  severeInfectionEnvironment: string;
  sterileCulture: number;
  subculturingDate: string;
  surplusBags: number;
  tissueCultureBags: number;
  tissueCultureLineCode: string;
  updatedAt: string;
}

export interface CreatePlantInfectionDto {
  infectionCode: string;
  infectionDescription: string;
  infectionIndex: number;
  infectionName: string;
  infectionStatus: string;
}

export interface UpdatePlanInfectionDto {
  id: string;
  planInfection: CreatePlantInfectionDto;
}

export interface PlantInfectionDto {
  id: string;
  infectionCode: string;
  infectionDescription: string;
  infectionIndex: number;
  infectionName: string;
  infectionStatus: string;
}

export interface UpdateInitiateCultureDto {
  id: string;
  initiateCulture: CreateInitiateCultureDto;
}

export type CreateInitiateCultureDtoEmployeesItem = { [key: string]: any };

export interface CreateInitiateCultureDto {
  barCode: string;
  batchCode: string;
  cellCultureCode: string;
  customerWeeks: number;
  employees: CreateInitiateCultureDtoEmployeesItem[];
  initiatecultureDate: string;
  motherStock: string;
  notes: string;
  numOfChildCluster: number;
  numOfMotherCluster: number;
  plantCloning: string;
  status: string;
  tissueCultureLineCode: string;
}

export type InitiateCultureDtoEmployeesItem = { [key: string]: any };

export interface InitiateCultureDto {
  barCode: string;
  batchCode: string;
  cellCultureCode: string;
  createdAt: string;
  customerWeeks: number;
  employees: InitiateCultureDtoEmployeesItem[];
  id: string;
  initiatecultureDate: string;
  motherStock: string;
  notes: string;
  numOfChildCluster: number;
  numOfMotherCluster: number;
  plantCloning: string;
  status: string;
  tissueCultureLineCode: string;
  updatedAt: string;
}

export interface CreateEnvironmentIngredientDto {
  barCode?: string;
  ingredientCode?: string;
  ingredientDescription?: string;
  ingredientName?: string;
  ingredientUnit?: string;
  status: string;
}

export interface UpdateEnvironmentIngredient {
  environmentIngredient: CreateEnvironmentIngredientDto;
  id: string;
}

export interface EnvironmentIngredientDto {
  barCode: string;
  id: string;
  ingredientCode: string;
  ingredientDescription: string;
  ingredientName: string;
  ingredientUnit: string;
  status: string;
}

export type CreateEnvironmentDtoIngredientsItem = { [key: string]: any };

export interface CreateEnvironmentDto {
  barCode: string;
  environmentCode: string;
  environmentDescription: string;
  environmentFormula?: string;
  environmentName: string;
  environmentStatus: string;
  environmentUnit: string;
  ingredients: CreateEnvironmentDtoIngredientsItem[];
  quantityInStock: number;
}

export interface UpdateEnvironmentDto {
  environment: CreateEnvironmentDto;
  id: string;
}

export type EnvironmentDtoIngredientsItem = { [key: string]: any };

export interface EnvironmentDto {
  barCode: string;
  createdAt: string;
  environmentCode: string;
  environmentDescription: string;
  environmentFormula?: string;
  environmentName: string;
  environmentStatus: string;
  environmentUnit: string;
  id: string;
  ingredients: EnvironmentDtoIngredientsItem[];
  quantityInStock: number;
  updatedAt: string;
}

export interface CreateCulturingPhaseDto {
  cellCultureCode: string;
  infectionRate: number;
  labCode: string;
  phaseCode: string;
  phaseIndex: number;
  phaseName: string;
  producingRate: number;
  tissueCultureLineCode: string;
}

export interface CulturingPhaseDto {
  cellCultureCode: string;
  id: string;
  infectionRate: number;
  labCode: string;
  phaseCode: string;
  phaseIndex: number;
  phaseName: string;
  producingRate: number;
  tissueCultureLineCode: string;
}

export interface CreateCulturingDishDto {
  boxId?: string;
  dishCode: string;
  dishDescription: string;
  dishName: string;
  dishType: string;
  status: string;
}

export interface UpdateCulturingDishDto {
  culturingDish: CreateCulturingDishDto;
  id: string;
}

export interface CulturingDishDto {
  boxId?: string;
  createdAt: string;
  dishCode: string;
  dishDescription: string;
  dishName: string;
  dishType: string;
  id: string;
  status: string;
  updatedAt: string;
}

export interface CreateCulturingCellDto {
  barCode: string;
  boxId: string;
  childCultureBags: number;
  childCultureCluster: number;
  createdAt: string;
  description: string;
  dishId?: string;
  employeeId: string;
  environmentId: string;
  hourOfCulturing: number;
  initiateCultureId: string;
  minuteOfCulturing: number;
  motherCultureBags: number;
  motherCultureCluster: number;
  reviewStatus: string;
  status: string;
  updatedAt: string;
}

export interface UpdateCulturingCellDto {
  culturingCell: CreateCulturingCellDto;
  id: string;
}

export interface CulturingCellDto {
  barCode: string;
  boxId: string;
  childCultureBags: number;
  childCultureCluster: number;
  createdAt: string;
  description: string;
  dishId?: string;
  employeeId: string;
  environmentId: string;
  hourOfCulturing: number;
  id: string;
  initiateCultureId: string;
  minuteOfCulturing: number;
  motherCultureBags: number;
  motherCultureCluster: number;
  reviewStatus: string;
  status: string;
  updatedAt: string;
}

export interface CreateCellCultureGroupDto {
  cultureCode: string;
  cultureName: string;
  cultureValue: string;
  status: string;
}

export interface UpdateCellCultureGroupDto {
  cellCultureGroup: CreateCellCultureGroupDto;
  id: string;
}

export interface CellCultureGroupDto {
  cultureCode: string;
  cultureName: string;
  cultureValue: string;
  id: string;
  status: string;
}

export type CreateBioEmployeeDtoPhone = { [key: string]: any };

export type CreateBioEmployeeDtoContract = { [key: string]: any };

export interface CreateBioEmployeeDto {
  contract: CreateBioEmployeeDtoContract;
  departmentId?: string;
  directManagerId?: string;
  dob: string;
  email: string;
  employeeId: string;
  firstName: string;
  gender: string;
  jobTitleCd: string;
  lastName: string;
  middleName: string;
  nickName: string;
  phone: CreateBioEmployeeDtoPhone;
  status: string;
  teamId?: string;
}

export interface UpdateBioEmployeeDto {
  employee: CreateBioEmployeeDto;
  id: string;
}

export type BioEmployeeDtoPhone = { [key: string]: any };

export type BioEmployeeDtoContract = { [key: string]: any };

export interface BioEmployeeDto {
  contract: BioEmployeeDtoContract;
  createdAt: string;
  departmentId?: string;
  directManagerId?: string;
  dob: string;
  email: string;
  employeeId: string;
  firstName: string;
  gender: string;
  id: string;
  jobTitleCd: string;
  lastName: string;
  middleName: string;
  nickName: string;
  phone: BioEmployeeDtoPhone;
  status: string;
  teamId?: string;
  updatedAt: string;
}

export interface CreateShelveDto {
  roomId: string;
  shelveCode: string;
  shelveDescription: string;
  shelveIndex: string;
  shelveLevels: number;
  shelveName: string;
  status: string;
}

export interface ShelveDto {
  id: string;
  roomId: string;
  shelveCode: string;
  shelveDescription: string;
  shelveIndex: string;
  shelveLevels: number;
  shelveName: string;
  status: string;
}

export interface CreateCulturingBoxDto {
  boxCode: string;
  boxName: string;
  boxSize: number;
  boxType: string;
  boxUnit: string;
  description: string;
  status: string;
}

export interface UpdateCulturingBoxDto {
  culturingBox: CreateCulturingBoxDto;
  id: string;
}

export interface CulturingBoxDto {
  boxCode: string;
  boxName: string;
  boxSize: number;
  boxType: string;
  boxUnit: string;
  createdAt: string;
  description: string;
  id: string;
  status: string;
  updatedAt: string;
}

export interface CreateCleanRoomDto {
  roomArea: number;
  roomCode: string;
  roomDescription: string;
  roomFloor: number;
  roomName: string;
  roomStatus: string;
}

export interface UpdateCleanRoomDto {
  cleanRoom: CreateCleanRoomDto;
  id: string;
}

export interface CleanRoomDto {
  id: string;
  roomArea: number;
  roomCode: string;
  roomDescription: string;
  roomFloor: number;
  roomName: string;
  roomStatus: string;
}

export type UserRoleId = { [key: string]: any };

export interface User {
  email: string;
  hashedPassword: string;
  organizationId: string;
  roleId: UserRoleId;
}

export interface GetUsersResponse {
  [key: string]: any;
}

export interface UploadFilesDto {
  file: Blob[];
}

export interface FileDto {
  fileName: string;
  fileUrl: string;
}

export interface UploadFileDto {
  file: Blob;
}

export const fileUploadControllerUploadSingle = (uploadFileDto: UploadFileDto) => {
  const formData = new FormData();
  formData.append('file', uploadFileDto.file);

  return customInstance<FileDto>({
    url: `/api/upload`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

export const fileUploadControllerUploadMultiple = (uploadFilesDto: UploadFilesDto) => {
  const formData = new FormData();
  uploadFilesDto.file.forEach((value) => formData.append('file', value));

  return customInstance<FileDto[]>({
    url: `/api/upload/multiple`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

export const fileUploadControllerGetFileUrl = (fileUrl: string) => {
  return customInstance<string>({ url: `/api/upload/${fileUrl}`, method: 'GET' });
};

export const usersControllerFindAll = (params?: UsersControllerFindAllParams) => {
  return customInstance<GetUsersResponse>({ url: `/api/users`, method: 'GET', params });
};

export const usersControllerFindOneByEmail = (email: string) => {
  return customInstance<User>({ url: `/api/users/${email}`, method: 'GET' });
};

export const cleanRoomControllerGetCleanRooms = () => {
  return customInstance<CleanRoomDto[]>({ url: `/api/cleanroom`, method: 'GET' });
};

export const cleanRoomControllerCreateCleanRoom = (createCleanRoomDto: CreateCleanRoomDto) => {
  return customInstance<CleanRoomDto>({
    url: `/api/cleanroom`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCleanRoomDto,
  });
};

export const cleanRoomControllerUpdateCleanRoom = (updateCleanRoomDto: UpdateCleanRoomDto) => {
  return customInstance<CleanRoomDto>({
    url: `/api/cleanroom`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCleanRoomDto,
  });
};

export const culturingBoxControllerGetCulturingBoxs = () => {
  return customInstance<CulturingBoxDto[]>({ url: `/api/culturingbox`, method: 'GET' });
};

export const culturingBoxControllerCreateCulturingBox = (createCulturingBoxDto: CreateCulturingBoxDto) => {
  return customInstance<CulturingBoxDto>({
    url: `/api/culturingbox`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCulturingBoxDto,
  });
};

export const culturingBoxControllerUpdateCulturingBox = (updateCulturingBoxDto: UpdateCulturingBoxDto) => {
  return customInstance<CulturingBoxDto>({
    url: `/api/culturingbox`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCulturingBoxDto,
  });
};

export const shelveControllerGetListShelves = () => {
  return customInstance<ShelveDto[]>({ url: `/api/shelve`, method: 'GET' });
};

export const shelveControllerCreateShelve = (createShelveDto: CreateShelveDto) => {
  return customInstance<ShelveDto>({
    url: `/api/shelve`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createShelveDto,
  });
};

export const shelveControllerGetListShelvesByRoomId = (roomId: string) => {
  return customInstance<ShelveDto[]>({ url: `/api/shelve/${roomId}`, method: 'GET' });
};

export const bioEmployeeControllerGetEmployees = () => {
  return customInstance<BioEmployeeDto[]>({ url: `/api/bioemployee`, method: 'GET' });
};

export const bioEmployeeControllerCreateEmployee = (createBioEmployeeDto: CreateBioEmployeeDto) => {
  return customInstance<BioEmployeeDto>({
    url: `/api/bioemployee`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createBioEmployeeDto,
  });
};

export const bioEmployeeControllerUpdateEmployee = (updateBioEmployeeDto: UpdateBioEmployeeDto) => {
  return customInstance<BioEmployeeDto>({
    url: `/api/bioemployee`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateBioEmployeeDto,
  });
};

export const bioEmployeeControllerGetEmployeesByTeamId = () => {
  return customInstance<BioEmployeeDto[]>({ url: `/api/bioemployee/teamId`, method: 'GET' });
};

export const bioEmployeeControllerGetEmployeeByEmployeeId = (id: string) => {
  return customInstance<BioEmployeeDto>({ url: `/api/bioemployee/detail/${id}`, method: 'GET' });
};

export const cellCultureGroupControllerGetCellCultureGroups = () => {
  return customInstance<CellCultureGroupDto[]>({ url: `/api/cellculturegroup`, method: 'GET' });
};

export const cellCultureGroupControllerCreateCellCultureGroup = (
  createCellCultureGroupDto: CreateCellCultureGroupDto,
) => {
  return customInstance<CellCultureGroupDto>({
    url: `/api/cellculturegroup`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCellCultureGroupDto,
  });
};

export const cellCultureGroupControllerUpdateCellCultureGroup = (
  updateCellCultureGroupDto: UpdateCellCultureGroupDto,
) => {
  return customInstance<CellCultureGroupDto>({
    url: `/api/cellculturegroup`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCellCultureGroupDto,
  });
};

export const cellCultureGroupControllerGetCellCultureGroupById = (id: string) => {
  return customInstance<CellCultureGroupDto>({ url: `/api/cellculturegroup/${id}`, method: 'GET' });
};

export const cellCultureGroupControllerGetCellCultureGroupByCode = (cultureCode: string) => {
  return customInstance<CellCultureGroupDto>({
    url: `/api/cellculturegroup/detailByBarCode/${cultureCode}`,
    method: 'GET',
  });
};

export const culturingCellControllerGetCulturingCells = () => {
  return customInstance<CulturingCellDto[]>({ url: `/api/culturingcell`, method: 'GET' });
};

export const culturingCellControllerCreateCulturingCell = (createCulturingCellDto: CreateCulturingCellDto) => {
  return customInstance<CulturingCellDto>({
    url: `/api/culturingcell`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCulturingCellDto,
  });
};

export const culturingCellControllerUpdateCulturingCell = (updateCulturingCellDto: UpdateCulturingCellDto) => {
  return customInstance<CulturingCellDto>({
    url: `/api/culturingcell`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCulturingCellDto,
  });
};

export const culturingCellControllerGetCulturingCellDetailById = (id: string) => {
  return customInstance<CulturingCellDto>({ url: `/api/culturingcell/${id}`, method: 'GET' });
};

export const culturingCellControllerGetCulturingCellDetailByBarCode = (barCode: string) => {
  return customInstance<CulturingCellDto>({ url: `/api/culturingcell/detailByBarCode/${barCode}`, method: 'GET' });
};

export const culturingDishControllerGetCulturingDishs = () => {
  return customInstance<CulturingDishDto[]>({ url: `/api/culturingdish`, method: 'GET' });
};

export const culturingDishControllerCreateCulturingDish = (createCulturingDishDto: CreateCulturingDishDto) => {
  return customInstance<CulturingDishDto>({
    url: `/api/culturingdish`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCulturingDishDto,
  });
};

export const culturingDishControllerUpdateCulturingDish = (updateCulturingDishDto: UpdateCulturingDishDto) => {
  return customInstance<CulturingDishDto>({
    url: `/api/culturingdish`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCulturingDishDto,
  });
};

export const culturingDishControllerGetCulturingDishsByBoxId = (boxId: string) => {
  return customInstance<CulturingDishDto[]>({ url: `/api/culturingdish/listDish/${boxId}`, method: 'GET' });
};

export const culturingPhaseControllerGetListCulturingPhases = () => {
  return customInstance<CulturingPhaseDto[]>({ url: `/api/culturingphase`, method: 'GET' });
};

export const culturingPhaseControllerCreateCulturingPhase = (createCulturingPhaseDto: CreateCulturingPhaseDto) => {
  return customInstance<CulturingPhaseDto>({
    url: `/api/culturingphase`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCulturingPhaseDto,
  });
};

export const culturingPhaseControllerGetListCulturingPhasesByTissueLineCode = (tissueCultureLineCode: string) => {
  return customInstance<CulturingPhaseDto[]>({ url: `/api/culturingphase/${tissueCultureLineCode}`, method: 'GET' });
};

export const environmentControllerGetEnvironments = () => {
  return customInstance<EnvironmentDto[]>({ url: `/api/environment`, method: 'GET' });
};

export const environmentControllerCreateEnvironment = (createEnvironmentDto: CreateEnvironmentDto) => {
  return customInstance<EnvironmentDto>({
    url: `/api/environment`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createEnvironmentDto,
  });
};

export const environmentControllerUpdateEnvironment = (updateEnvironmentDto: UpdateEnvironmentDto) => {
  return customInstance<EnvironmentDto>({
    url: `/api/environment`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateEnvironmentDto,
  });
};

export const environmentControllerGetEnvironmentIngredients = () => {
  return customInstance<EnvironmentIngredientDto[]>({ url: `/api/environment/ingredients`, method: 'GET' });
};

export const environmentControllerCreateEnvironmentIngredient = (
  createEnvironmentIngredientDto: CreateEnvironmentIngredientDto,
) => {
  return customInstance<EnvironmentIngredientDto>({
    url: `/api/environment/ingredient`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createEnvironmentIngredientDto,
  });
};

export const environmentControllerUpdateEnvironmentIngredient = (
  updateEnvironmentIngredient: UpdateEnvironmentIngredient,
) => {
  return customInstance<EnvironmentIngredientDto>({
    url: `/api/environment/ingredient`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateEnvironmentIngredient,
  });
};

export const initiateCultureControllerGetListInitiateCultures = () => {
  return customInstance<InitiateCultureDto[]>({ url: `/api/initiateculture`, method: 'GET' });
};

export const initiateCultureControllerCreateInitiateCulture = (createInitiateCultureDto: CreateInitiateCultureDto) => {
  return customInstance<InitiateCultureDto>({
    url: `/api/initiateculture`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createInitiateCultureDto,
  });
};

export const initiateCultureControllerUpdateInitiateCulture = (updateInitiateCultureDto: UpdateInitiateCultureDto) => {
  return customInstance<InitiateCultureDto>({
    url: `/api/initiateculture`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateInitiateCultureDto,
  });
};

export const initiateCultureControllerGetInitiateCultureById = (id: string) => {
  return customInstance<InitiateCultureDto>({ url: `/api/initiateculture/${id}`, method: 'GET' });
};

export const initiateCultureControllerGetInitiateCultureByBarCode = (barCode: string) => {
  return customInstance<InitiateCultureDto>({ url: `/api/initiateculture/detailByBarCode/${barCode}`, method: 'GET' });
};

export const plantInfectionControllerGetPlantInfections = () => {
  return customInstance<PlantInfectionDto[]>({ url: `/api/plantinfection`, method: 'GET' });
};

export const plantInfectionControllerCreatePlantInfection = (createPlantInfectionDto: CreatePlantInfectionDto) => {
  return customInstance<PlantInfectionDto>({
    url: `/api/plantinfection`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPlantInfectionDto,
  });
};

export const plantInfectionControllerUpdatePlantInfection = (updatePlanInfectionDto: UpdatePlanInfectionDto) => {
  return customInstance<PlantInfectionDto>({
    url: `/api/plantinfection`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updatePlanInfectionDto,
  });
};

export const subculturingControllerGetListSubculturings = () => {
  return customInstance<SubculturingDto[]>({ url: `/api/subculturing`, method: 'GET' });
};

export const subculturingControllerCreateSubculturing = (createSubCulturingDto: CreateSubCulturingDto) => {
  return customInstance<SubculturingDto>({
    url: `/api/subculturing`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createSubCulturingDto,
  });
};

export const subculturingControllerUpdateSubculturing = (updateSubCulturingDto: UpdateSubCulturingDto) => {
  return customInstance<SubculturingDto>({
    url: `/api/subculturing`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateSubCulturingDto,
  });
};

export const subculturingControllerGetSubculturingById = (id: string) => {
  return customInstance<SubculturingDto>({ url: `/api/subculturing/${id}`, method: 'GET' });
};

export const subculturingControllerGetSubculturingByBarCode = (barCode: string) => {
  return customInstance<SubculturingDto>({ url: `/api/subculturing/detailByBarCode/${barCode}`, method: 'GET' });
};

export const orderControllerGetListOrders = () => {
  return customInstance<OrderDto[]>({ url: `/api/order`, method: 'GET' });
};

export const orderControllerCreateOrder = (createOrderDto: CreateOrderDto) => {
  return customInstance<OrderDto>({
    url: `/api/order`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createOrderDto,
  });
};

export const orderControllerUpdateOrder = (updateOrderDto: UpdateOrderDto) => {
  return customInstance<OrderDto>({
    url: `/api/order`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateOrderDto,
  });
};

export const orderControllerGetDetailOrderById = (id: string) => {
  return customInstance<OrderDto>({ url: `/api/order/${id}`, method: 'GET' });
};

export const productionStepControllerGetListProductionSteps = () => {
  return customInstance<ProductionStepDto[]>({ url: `/api/productionstep`, method: 'GET' });
};

export const productionStepControllerCreateProductionStep = (createProductionStepDto: CreateProductionStepDto) => {
  return customInstance<ProductionStepDto>({
    url: `/api/productionstep`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createProductionStepDto,
  });
};

export const productionStepControllerUpdateProductionStep = (updateProductionStepDto: UpdateProductionStepDto) => {
  return customInstance<ProductionStepDto>({
    url: `/api/productionstep`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateProductionStepDto,
  });
};

export const productionStepControllerGetListProductionStepsByPlanId = (planId: string) => {
  return customInstance<ProductionStepDto[]>({ url: `/api/productionstep/listSteps/${planId}`, method: 'GET' });
};

export const productionStepControllerGetDetailProductionStepById = (id: string) => {
  return customInstance<ProductionStepDto>({ url: `/api/productionstep/${id}`, method: 'GET' });
};

export const cellCultureMediumControllerGetListCellCultureMediums = () => {
  return customInstance<CellCultureMediumDto[]>({ url: `/api/cellculturemedium`, method: 'GET' });
};

export const cellCultureMediumControllerCreateCellCultureMedium = (
  createCellCultureMediumDto: CreateCellCultureMediumDto,
) => {
  return customInstance<CellCultureMediumDto>({
    url: `/api/cellculturemedium`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createCellCultureMediumDto,
  });
};

export const cellCultureMediumControllerUpdateCellCultureMedium = (
  updateCellCultureMediumDto: UpdateCellCultureMediumDto,
) => {
  return customInstance<CellCultureMediumDto>({
    url: `/api/cellculturemedium`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateCellCultureMediumDto,
  });
};

export const cellCultureMediumControllerGetListCellCultureMediumByEnvironmentCodes = (environmentalCode: string) => {
  return customInstance<CellCultureMediumDto[]>({
    url: `/api/cellculturemedium/listByEnvironmentalCode/${environmentalCode}`,
    method: 'GET',
  });
};

export const cellCultureMediumControllerGetCellCultureMediumById = (id: string) => {
  return customInstance<CellCultureMediumDto>({ url: `/api/cellculturemedium/${id}`, method: 'GET' });
};

export const changingCultureMediumControllerGetListChangingCultureMediums = () => {
  return customInstance<ChangingCultureMediumDto[]>({ url: `/api/changingculturemedium`, method: 'GET' });
};

export const changingCultureMediumControllerCreateChangingCultureMedium = (
  createChangingCultureMediumDto: CreateChangingCultureMediumDto,
) => {
  return customInstance<ChangingCultureMediumDto>({
    url: `/api/changingculturemedium`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createChangingCultureMediumDto,
  });
};

export const changingCultureMediumControllerUpdateChangingCultureMedium = (
  updateChangingCultureMediumDto: UpdateChangingCultureMediumDto,
) => {
  return customInstance<ChangingCultureMediumDto>({
    url: `/api/changingculturemedium`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateChangingCultureMediumDto,
  });
};

export const changingCultureMediumControllerGetListCellCultureMediumByEnvironmentCodes = (
  changingCultureDate: string,
) => {
  return customInstance<ChangingCultureMediumDto[]>({
    url: `/api/changingculturemedium/listByEnvironmentCode/${changingCultureDate}`,
    method: 'GET',
  });
};

export const changingCultureMediumControllerGetChangingCultureMediumById = (id: string) => {
  return customInstance<ChangingCultureMediumDto>({ url: `/api/changingculturemedium/${id}`, method: 'GET' });
};

export const authControllerCreateUser = (createUserDto: CreateUserDto) => {
  return customInstance<User>({
    url: `/api/auth/createUser`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createUserDto,
  });
};

export const authControllerLogin = (loginDto: LoginDto) => {
  return customInstance<Token>({
    url: `/api/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginDto,
  });
};

export const authControllerRefreshToken = (refreshTokenDto: RefreshTokenDto) => {
  return customInstance<Token>({
    url: `/api/auth/refreshtoken`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: refreshTokenDto,
  });
};

export const notificationControllerGetNotifications = (employeeId: string) => {
  return customInstance<NotificationControllerGetNotifications200Item[]>({
    url: `/api/notifications/${employeeId}`,
    method: 'GET',
  });
};

export const notificationControllerMarkNotificationAsRead = (employeeId: string, id: string) => {
  return customInstance<void>({ url: `/api/notifications/mark-as-read/${employeeId}/${id}`, method: 'PUT' });
};

export const rolesControllerGetRoles = (params?: RolesControllerGetRolesParams) => {
  return customInstance<RolesDto>({ url: `/api/roles`, method: 'GET', params });
};

export const rolesControllerCreateRole = (createRoleDto: CreateRoleDto) => {
  return customInstance<RoleDto>({
    url: `/api/roles`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createRoleDto,
  });
};

export const rolesControllerGetPermissionsByRole = (roleId: string) => {
  return customInstance<GetRolePermissionsResponse>({ url: `/api/roles/${roleId}`, method: 'GET' });
};

export const lovControllerGetLovs = () => {
  return customInstance<LovDto[]>({ url: `/api/lov`, method: 'GET' });
};

export const lovControllerCreateLov = (createLovDto: CreateLovDto) => {
  return customInstance<LovDto>({
    url: `/api/lov`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createLovDto,
  });
};

export const lovControllerUpdateLov = (updateLovDto: UpdateLovDto) => {
  return customInstance<LovDto>({
    url: `/api/lov`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateLovDto,
  });
};

export const lovControllerGetLovsByType = (lovType: string) => {
  return customInstance<LovDto[]>({ url: `/api/lov/${lovType}`, method: 'GET' });
};

export const globalSettingControllerGetGlobalSetting = () => {
  return customInstance<GlobalSettingDto[]>({ url: `/api/GlobalSetting`, method: 'GET' });
};

export const globalSettingControllerCreateGlobalSetting = (createGlobalSettingDto: CreateGlobalSettingDto) => {
  return customInstance<GlobalSettingDto>({
    url: `/api/GlobalSetting`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createGlobalSettingDto,
  });
};

export const globalSettingControllerUpdateGlobalSetting = (updateGlobalSettingDto: UpdateGlobalSettingDto) => {
  return customInstance<GlobalSettingDto>({
    url: `/api/GlobalSetting`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateGlobalSettingDto,
  });
};

export const organizationsControllerGetOrganizations = (params?: OrganizationsControllerGetOrganizationsParams) => {
  return customInstance<OrganizationsDto>({ url: `/api/organizations`, method: 'GET', params });
};

export type FileUploadControllerUploadSingleResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerUploadSingle>>
>;
export type FileUploadControllerUploadMultipleResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerUploadMultiple>>
>;
export type FileUploadControllerGetFileUrlResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerGetFileUrl>>
>;
export type UsersControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindAll>>>;
export type UsersControllerFindOneByEmailResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindOneByEmail>>
>;
export type CleanRoomControllerGetCleanRoomsResult = NonNullable<
  Awaited<ReturnType<typeof cleanRoomControllerGetCleanRooms>>
>;
export type CleanRoomControllerCreateCleanRoomResult = NonNullable<
  Awaited<ReturnType<typeof cleanRoomControllerCreateCleanRoom>>
>;
export type CleanRoomControllerUpdateCleanRoomResult = NonNullable<
  Awaited<ReturnType<typeof cleanRoomControllerUpdateCleanRoom>>
>;
export type CulturingBoxControllerGetCulturingBoxsResult = NonNullable<
  Awaited<ReturnType<typeof culturingBoxControllerGetCulturingBoxs>>
>;
export type CulturingBoxControllerCreateCulturingBoxResult = NonNullable<
  Awaited<ReturnType<typeof culturingBoxControllerCreateCulturingBox>>
>;
export type CulturingBoxControllerUpdateCulturingBoxResult = NonNullable<
  Awaited<ReturnType<typeof culturingBoxControllerUpdateCulturingBox>>
>;
export type ShelveControllerGetListShelvesResult = NonNullable<
  Awaited<ReturnType<typeof shelveControllerGetListShelves>>
>;
export type ShelveControllerCreateShelveResult = NonNullable<Awaited<ReturnType<typeof shelveControllerCreateShelve>>>;
export type ShelveControllerGetListShelvesByRoomIdResult = NonNullable<
  Awaited<ReturnType<typeof shelveControllerGetListShelvesByRoomId>>
>;
export type BioEmployeeControllerGetEmployeesResult = NonNullable<
  Awaited<ReturnType<typeof bioEmployeeControllerGetEmployees>>
>;
export type BioEmployeeControllerCreateEmployeeResult = NonNullable<
  Awaited<ReturnType<typeof bioEmployeeControllerCreateEmployee>>
>;
export type BioEmployeeControllerUpdateEmployeeResult = NonNullable<
  Awaited<ReturnType<typeof bioEmployeeControllerUpdateEmployee>>
>;
export type BioEmployeeControllerGetEmployeesByTeamIdResult = NonNullable<
  Awaited<ReturnType<typeof bioEmployeeControllerGetEmployeesByTeamId>>
>;
export type BioEmployeeControllerGetEmployeeByEmployeeIdResult = NonNullable<
  Awaited<ReturnType<typeof bioEmployeeControllerGetEmployeeByEmployeeId>>
>;
export type CellCultureGroupControllerGetCellCultureGroupsResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureGroupControllerGetCellCultureGroups>>
>;
export type CellCultureGroupControllerCreateCellCultureGroupResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureGroupControllerCreateCellCultureGroup>>
>;
export type CellCultureGroupControllerUpdateCellCultureGroupResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureGroupControllerUpdateCellCultureGroup>>
>;
export type CellCultureGroupControllerGetCellCultureGroupByIdResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureGroupControllerGetCellCultureGroupById>>
>;
export type CellCultureGroupControllerGetCellCultureGroupByCodeResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureGroupControllerGetCellCultureGroupByCode>>
>;
export type CulturingCellControllerGetCulturingCellsResult = NonNullable<
  Awaited<ReturnType<typeof culturingCellControllerGetCulturingCells>>
>;
export type CulturingCellControllerCreateCulturingCellResult = NonNullable<
  Awaited<ReturnType<typeof culturingCellControllerCreateCulturingCell>>
>;
export type CulturingCellControllerUpdateCulturingCellResult = NonNullable<
  Awaited<ReturnType<typeof culturingCellControllerUpdateCulturingCell>>
>;
export type CulturingCellControllerGetCulturingCellDetailByIdResult = NonNullable<
  Awaited<ReturnType<typeof culturingCellControllerGetCulturingCellDetailById>>
>;
export type CulturingCellControllerGetCulturingCellDetailByBarCodeResult = NonNullable<
  Awaited<ReturnType<typeof culturingCellControllerGetCulturingCellDetailByBarCode>>
>;
export type CulturingDishControllerGetCulturingDishsResult = NonNullable<
  Awaited<ReturnType<typeof culturingDishControllerGetCulturingDishs>>
>;
export type CulturingDishControllerCreateCulturingDishResult = NonNullable<
  Awaited<ReturnType<typeof culturingDishControllerCreateCulturingDish>>
>;
export type CulturingDishControllerUpdateCulturingDishResult = NonNullable<
  Awaited<ReturnType<typeof culturingDishControllerUpdateCulturingDish>>
>;
export type CulturingDishControllerGetCulturingDishsByBoxIdResult = NonNullable<
  Awaited<ReturnType<typeof culturingDishControllerGetCulturingDishsByBoxId>>
>;
export type CulturingPhaseControllerGetListCulturingPhasesResult = NonNullable<
  Awaited<ReturnType<typeof culturingPhaseControllerGetListCulturingPhases>>
>;
export type CulturingPhaseControllerCreateCulturingPhaseResult = NonNullable<
  Awaited<ReturnType<typeof culturingPhaseControllerCreateCulturingPhase>>
>;
export type CulturingPhaseControllerGetListCulturingPhasesByTissueLineCodeResult = NonNullable<
  Awaited<ReturnType<typeof culturingPhaseControllerGetListCulturingPhasesByTissueLineCode>>
>;
export type EnvironmentControllerGetEnvironmentsResult = NonNullable<
  Awaited<ReturnType<typeof environmentControllerGetEnvironments>>
>;
export type EnvironmentControllerCreateEnvironmentResult = NonNullable<
  Awaited<ReturnType<typeof environmentControllerCreateEnvironment>>
>;
export type EnvironmentControllerUpdateEnvironmentResult = NonNullable<
  Awaited<ReturnType<typeof environmentControllerUpdateEnvironment>>
>;
export type EnvironmentControllerGetEnvironmentIngredientsResult = NonNullable<
  Awaited<ReturnType<typeof environmentControllerGetEnvironmentIngredients>>
>;
export type EnvironmentControllerCreateEnvironmentIngredientResult = NonNullable<
  Awaited<ReturnType<typeof environmentControllerCreateEnvironmentIngredient>>
>;
export type EnvironmentControllerUpdateEnvironmentIngredientResult = NonNullable<
  Awaited<ReturnType<typeof environmentControllerUpdateEnvironmentIngredient>>
>;
export type InitiateCultureControllerGetListInitiateCulturesResult = NonNullable<
  Awaited<ReturnType<typeof initiateCultureControllerGetListInitiateCultures>>
>;
export type InitiateCultureControllerCreateInitiateCultureResult = NonNullable<
  Awaited<ReturnType<typeof initiateCultureControllerCreateInitiateCulture>>
>;
export type InitiateCultureControllerUpdateInitiateCultureResult = NonNullable<
  Awaited<ReturnType<typeof initiateCultureControllerUpdateInitiateCulture>>
>;
export type InitiateCultureControllerGetInitiateCultureByIdResult = NonNullable<
  Awaited<ReturnType<typeof initiateCultureControllerGetInitiateCultureById>>
>;
export type InitiateCultureControllerGetInitiateCultureByBarCodeResult = NonNullable<
  Awaited<ReturnType<typeof initiateCultureControllerGetInitiateCultureByBarCode>>
>;
export type PlantInfectionControllerGetPlantInfectionsResult = NonNullable<
  Awaited<ReturnType<typeof plantInfectionControllerGetPlantInfections>>
>;
export type PlantInfectionControllerCreatePlantInfectionResult = NonNullable<
  Awaited<ReturnType<typeof plantInfectionControllerCreatePlantInfection>>
>;
export type PlantInfectionControllerUpdatePlantInfectionResult = NonNullable<
  Awaited<ReturnType<typeof plantInfectionControllerUpdatePlantInfection>>
>;
export type SubculturingControllerGetListSubculturingsResult = NonNullable<
  Awaited<ReturnType<typeof subculturingControllerGetListSubculturings>>
>;
export type SubculturingControllerCreateSubculturingResult = NonNullable<
  Awaited<ReturnType<typeof subculturingControllerCreateSubculturing>>
>;
export type SubculturingControllerUpdateSubculturingResult = NonNullable<
  Awaited<ReturnType<typeof subculturingControllerUpdateSubculturing>>
>;
export type SubculturingControllerGetSubculturingByIdResult = NonNullable<
  Awaited<ReturnType<typeof subculturingControllerGetSubculturingById>>
>;
export type SubculturingControllerGetSubculturingByBarCodeResult = NonNullable<
  Awaited<ReturnType<typeof subculturingControllerGetSubculturingByBarCode>>
>;
export type OrderControllerGetListOrdersResult = NonNullable<Awaited<ReturnType<typeof orderControllerGetListOrders>>>;
export type OrderControllerCreateOrderResult = NonNullable<Awaited<ReturnType<typeof orderControllerCreateOrder>>>;
export type OrderControllerUpdateOrderResult = NonNullable<Awaited<ReturnType<typeof orderControllerUpdateOrder>>>;
export type OrderControllerGetDetailOrderByIdResult = NonNullable<
  Awaited<ReturnType<typeof orderControllerGetDetailOrderById>>
>;
export type ProductionStepControllerGetListProductionStepsResult = NonNullable<
  Awaited<ReturnType<typeof productionStepControllerGetListProductionSteps>>
>;
export type ProductionStepControllerCreateProductionStepResult = NonNullable<
  Awaited<ReturnType<typeof productionStepControllerCreateProductionStep>>
>;
export type ProductionStepControllerUpdateProductionStepResult = NonNullable<
  Awaited<ReturnType<typeof productionStepControllerUpdateProductionStep>>
>;
export type ProductionStepControllerGetListProductionStepsByPlanIdResult = NonNullable<
  Awaited<ReturnType<typeof productionStepControllerGetListProductionStepsByPlanId>>
>;
export type ProductionStepControllerGetDetailProductionStepByIdResult = NonNullable<
  Awaited<ReturnType<typeof productionStepControllerGetDetailProductionStepById>>
>;
export type CellCultureMediumControllerGetListCellCultureMediumsResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureMediumControllerGetListCellCultureMediums>>
>;
export type CellCultureMediumControllerCreateCellCultureMediumResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureMediumControllerCreateCellCultureMedium>>
>;
export type CellCultureMediumControllerUpdateCellCultureMediumResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureMediumControllerUpdateCellCultureMedium>>
>;
export type CellCultureMediumControllerGetListCellCultureMediumByEnvironmentCodesResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureMediumControllerGetListCellCultureMediumByEnvironmentCodes>>
>;
export type CellCultureMediumControllerGetCellCultureMediumByIdResult = NonNullable<
  Awaited<ReturnType<typeof cellCultureMediumControllerGetCellCultureMediumById>>
>;
export type ChangingCultureMediumControllerGetListChangingCultureMediumsResult = NonNullable<
  Awaited<ReturnType<typeof changingCultureMediumControllerGetListChangingCultureMediums>>
>;
export type ChangingCultureMediumControllerCreateChangingCultureMediumResult = NonNullable<
  Awaited<ReturnType<typeof changingCultureMediumControllerCreateChangingCultureMedium>>
>;
export type ChangingCultureMediumControllerUpdateChangingCultureMediumResult = NonNullable<
  Awaited<ReturnType<typeof changingCultureMediumControllerUpdateChangingCultureMedium>>
>;
export type ChangingCultureMediumControllerGetListCellCultureMediumByEnvironmentCodesResult = NonNullable<
  Awaited<ReturnType<typeof changingCultureMediumControllerGetListCellCultureMediumByEnvironmentCodes>>
>;
export type ChangingCultureMediumControllerGetChangingCultureMediumByIdResult = NonNullable<
  Awaited<ReturnType<typeof changingCultureMediumControllerGetChangingCultureMediumById>>
>;
export type AuthControllerCreateUserResult = NonNullable<Awaited<ReturnType<typeof authControllerCreateUser>>>;
export type AuthControllerLoginResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>;
export type AuthControllerRefreshTokenResult = NonNullable<Awaited<ReturnType<typeof authControllerRefreshToken>>>;
export type NotificationControllerGetNotificationsResult = NonNullable<
  Awaited<ReturnType<typeof notificationControllerGetNotifications>>
>;
export type NotificationControllerMarkNotificationAsReadResult = NonNullable<
  Awaited<ReturnType<typeof notificationControllerMarkNotificationAsRead>>
>;
export type RolesControllerGetRolesResult = NonNullable<Awaited<ReturnType<typeof rolesControllerGetRoles>>>;
export type RolesControllerCreateRoleResult = NonNullable<Awaited<ReturnType<typeof rolesControllerCreateRole>>>;
export type RolesControllerGetPermissionsByRoleResult = NonNullable<
  Awaited<ReturnType<typeof rolesControllerGetPermissionsByRole>>
>;
export type LovControllerGetLovsResult = NonNullable<Awaited<ReturnType<typeof lovControllerGetLovs>>>;
export type LovControllerCreateLovResult = NonNullable<Awaited<ReturnType<typeof lovControllerCreateLov>>>;
export type LovControllerUpdateLovResult = NonNullable<Awaited<ReturnType<typeof lovControllerUpdateLov>>>;
export type LovControllerGetLovsByTypeResult = NonNullable<Awaited<ReturnType<typeof lovControllerGetLovsByType>>>;
export type GlobalSettingControllerGetGlobalSettingResult = NonNullable<
  Awaited<ReturnType<typeof globalSettingControllerGetGlobalSetting>>
>;
export type GlobalSettingControllerCreateGlobalSettingResult = NonNullable<
  Awaited<ReturnType<typeof globalSettingControllerCreateGlobalSetting>>
>;
export type GlobalSettingControllerUpdateGlobalSettingResult = NonNullable<
  Awaited<ReturnType<typeof globalSettingControllerUpdateGlobalSetting>>
>;
export type OrganizationsControllerGetOrganizationsResult = NonNullable<
  Awaited<ReturnType<typeof organizationsControllerGetOrganizations>>
>;
